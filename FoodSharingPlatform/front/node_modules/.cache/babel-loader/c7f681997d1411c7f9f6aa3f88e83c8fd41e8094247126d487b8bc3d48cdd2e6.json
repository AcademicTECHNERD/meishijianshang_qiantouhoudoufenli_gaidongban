{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport router from '@/router/router-static';\nimport storage from '@/utils/storage';\nvar http = axios.create({\n  timeout: 1000 * 86400,\n  withCredentials: true,\n  baseURL: '/springboot35l3z',\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\n\n// 请求拦截\nhttp.interceptors.request.use(function (config) {\n  config.headers['Token'] = storage.get('Token'); // 请求头带上token\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\n// 响应拦截\nhttp.interceptors.response.use(function (response) {\n  if (response.data && response.data.code === 401) {\n    // 401, token失效\n    if (router.currentRoute.name !== 'login') {\n      // 避免重复跳转\n      router.push({\n        name: 'login'\n      }).catch(function (err) {\n        if (err.name !== 'NavigationDuplicated') {\n          console.error(err);\n        }\n      });\n    }\n  }\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default http;","map":{"version":3,"names":["axios","router","storage","http","create","timeout","withCredentials","baseURL","headers","interceptors","request","use","config","get","error","Promise","reject","response","data","code","currentRoute","name","push","catch","err","console"],"sources":["E:/项目学习合集/FoodSharingPlatform/front/src/utils/http.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from '@/router/router-static'\r\nimport storage from '@/utils/storage'\r\n\r\nconst http = axios.create({\r\n    timeout: 1000 * 86400,\r\n    withCredentials: true,\r\n    baseURL: '/springboot35l3z',\r\n    headers: {\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    }\r\n})\r\n\r\n// 请求拦截\r\nhttp.interceptors.request.use(config => {\r\n    config.headers['Token'] = storage.get('Token') // 请求头带上token\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n})\r\n\r\n// 响应拦截\r\nhttp.interceptors.response.use(response => {\r\n    if (response.data && response.data.code === 401) { // 401, token失效\r\n        if (router.currentRoute.name !== 'login') {  // 避免重复跳转\r\n            router.push({ name: 'login' }).catch(err => {\r\n                if (err.name !== 'NavigationDuplicated') {\r\n                    console.error(err)\r\n                }\r\n            })\r\n        }\r\n    }\r\n    return response\r\n}, error => {\r\n    return Promise.reject(error)\r\n})\r\n\r\nexport default http\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,OAAO,MAAM,iBAAiB;AAErC,IAAMC,IAAI,GAAGH,KAAK,CAACI,MAAM,CAAC;EACtBC,OAAO,EAAE,IAAI,GAAG,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE,kBAAkB;EAC3BC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAL,IAAI,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAAAC,MAAM,EAAI;EACpCA,MAAM,CAACJ,OAAO,CAAC,OAAO,CAAC,GAAGN,OAAO,CAACW,GAAG,CAAC,OAAO,CAAC,EAAC;EAC/C,OAAOD,MAAM;AACjB,CAAC,EAAE,UAAAE,KAAK,EAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACAX,IAAI,CAACM,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAAC,UAAAM,QAAQ,EAAI;EACvC,IAAIA,QAAQ,CAACC,IAAI,IAAID,QAAQ,CAACC,IAAI,CAACC,IAAI,KAAK,GAAG,EAAE;IAAE;IAC/C,IAAIlB,MAAM,CAACmB,YAAY,CAACC,IAAI,KAAK,OAAO,EAAE;MAAG;MACzCpB,MAAM,CAACqB,IAAI,CAAC;QAAED,IAAI,EAAE;MAAQ,CAAC,CAAC,CAACE,KAAK,CAAC,UAAAC,GAAG,EAAI;QACxC,IAAIA,GAAG,CAACH,IAAI,KAAK,sBAAsB,EAAE;UACrCI,OAAO,CAACX,KAAK,CAACU,GAAG,CAAC;QACtB;MACJ,CAAC,CAAC;IACN;EACJ;EACA,OAAOP,QAAQ;AACnB,CAAC,EAAE,UAAAH,KAAK,EAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAEF,eAAeX,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}